import React, { useState, useEffect, useRef } from 'react';
import { Link, useNavigate } from 'react-router-dom';
import { ArrowLeft, BarChart2, PlayIcon } from 'lucide-react';
import { useUser } from '../contexts/UserContext';
import { useRewards } from '../contexts/RewardContext';
import { saveGameStats } from '../firebase/utils';
import { useUserStats } from '../hooks/useUserStats';
import CoinAnimation from '../components/CoinAnimation'; 
import { COIN_REWARDS } from '../types/coinTypes';
import RewardNotification from './rewards/RewardNotification';
import { UserGameStats, GameType as UserGameStatsGameType } from '../types/gameTypes';
import { RewardNotification as RewardNotificationType } from '../types/rewardTypes';
import StatsModal from './StatsModal';
import { gameStyles, gameColors } from '../styles/gameStyles';

const TOTAL_QUESTIONS = 20;

const Game: React.FC = () => {
  const navigate = useNavigate();
  const { user, updateCoins } = useUser();
  const { checkGameAchievements: contextCheckGameAchievements, notifications: contextNotifications, refreshRewards: refreshRewardsContext } = useRewards();
  const [num1, setNum1] = useState(0);
  const [num2, setNum2] = useState(0);
  const [userAnswer, setUserAnswer] = useState('');
  const [score, setScore] = useState(0);
  const [questionsAnswered, setQuestionsAnswered] = useState(0);
  const [gameHistory, setGameHistory] = useState<string[]>([]);
  const [difficulty, setDifficulty] = useState<'easy' | 'medium' | 'hard'>('medium');
  const [selectedNumber, setSelectedNumber] = useState<number | undefined>(undefined);
  const [time, setTime] = useState(0);
  const [isGameStarted, setIsGameStarted] = useState(false);
  const timerRef = useRef<NodeJS.Timeout | null>(null);
  const { stats: userStats, loading: statsLoading, error: statsError, refreshStats } = useUserStats(user?.id || '', 'multiplication');
  const [showStats, setShowStats] = useState(false);
  const [showCoinAnimation, setShowCoinAnimation] = useState(false);
  const [earnedCoins, setEarnedCoins] = useState(0);
  const [coinAnimationType, setCoinAnimationType] = useState<'correct' | 'streak' | 'perfect'>('correct');
  const [currentStreak, setCurrentStreak] = useState(0);
  const [isProcessingAnswer, setIsProcessingAnswer] = useState(false);
  const [currentNotification, setCurrentNotification] = useState<RewardNotificationType | null>(null);
  const inputRef = useRef<HTMLInputElement>(null);
  const [usedNumbers, setUsedNumbers] = useState<string[]>([]); 
  const [showResults, setShowResults] = useState(false); 

  useEffect(() => {
    if (isGameStarted && !showResults) {
      timerRef.current = setInterval(() => {
        setTime(prev => prev + 1);
      }, 1000);
    }

    return () => {
      if (timerRef.current) {
        clearInterval(timerRef.current);
      }
    };
  }, [isGameStarted]);

  const generateQuestion = () => {
    // Focus the input field when generating a new question
    setTimeout(() => {
      if (inputRef.current) {
        inputRef.current.focus();
      }
    }, 100);
    
    let newNum1: number;
    let newNum2: number;

    let maxRange;
    switch (difficulty) {
      case 'easy':
        maxRange = 10;
        break;
      case 'medium':
        maxRange = 20;
        break;
      case 'hard':
        maxRange = 30;
        break;
      default:
        maxRange = 10;
    }

    let availableNumbers = Array.from({ length: maxRange }, (_, i) => i + 1)
      .filter(num => !usedNumbers.includes(num.toString()));

    if (availableNumbers.length === 0) {
      setUsedNumbers([]);
      availableNumbers = Array.from({ length: maxRange }, (_, i) => i + 1);
    }

    const randomIndex = Math.floor(Math.random() * availableNumbers.length);
    const randomNumber = availableNumbers[randomIndex];

    setUsedNumbers((prev: string[]) => [...prev, randomNumber.toString()]);

    if (selectedNumber) {
      newNum1 = selectedNumber;
      newNum2 = randomNumber;
    } else {
      newNum1 = Math.floor(Math.random() * 9) + 1;
      newNum2 = randomNumber;
    }

    setNum1(newNum1);
    setNum2(newNum2);
    setUserAnswer('');
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (isProcessingAnswer) return;
    setIsProcessingAnswer(true);
    
    // Clear focus from input field during processing to improve UX
    if (document.activeElement instanceof HTMLElement) {
      document.activeElement.blur();
    }

    const correctAnswer = num1 * num2;
    const userAnswerNum = parseInt(userAnswer);

    if (userAnswerNum === correctAnswer) {
      setScore(prev => prev + 1);
      setGameHistory(prev => [...prev, `Question: ${num1} × ${num2} = ${userAnswerNum} (Correct)`]);
      
      // Update streak
      setCurrentStreak(prev => prev + 1);
      
      // Show coin animation
      setEarnedCoins(COIN_REWARDS.CORRECT_ANSWER);
      setCoinAnimationType('correct');
      setShowCoinAnimation(true);
      
      // Update user coins
      if (user && updateCoins) {
        updateCoins(COIN_REWARDS.CORRECT_ANSWER);
      }
    } else {
      setGameHistory(prev => [...prev, `Question: ${num1} × ${num2} = ${userAnswerNum} (Incorrect, correct: ${correctAnswer})`]);
      setCurrentStreak(0);
    }

    setQuestionsAnswered(prev => prev + 1);
    
    if (questionsAnswered + 1 >= TOTAL_QUESTIONS) {
      handleGameCompletion();
    } else {
      generateQuestion();
    }
    
    setIsProcessingAnswer(false);
  };

  const handleGameCompletion = () => {
    if (timerRef.current) {
      clearInterval(timerRef.current);
      timerRef.current = null;
    }

    setShowResults(true);
    
    // Save game stats to Firebase
    if (user?.id) {
      const accuracy = (score / TOTAL_QUESTIONS) * 100;
      const gameStats: UserGameStats = {
        gameType: 'multiplication' as UserGameStatsGameType,
        score,
        totalQuestions: TOTAL_QUESTIONS,
        accuracy,
        timeSpent: time,
        date: new Date().toISOString(),
        difficulty,
        history: gameHistory,
      };
      
      // Save stats to Firebase
      saveGameStats(user.id, gameStats)
        .then(() => {
          console.log('Game stats saved successfully');
          if (refreshStats) refreshStats();
        })
        .catch(error => {
          console.error('Error saving game stats:', error);
        });
      
      // Check for achievements
      if (contextCheckGameAchievements) {
        contextCheckGameAchievements('multiplication', {
          score,
          accuracy,
          time,
          difficulty
        });
      }
      
      // Award completion coins
      if (updateCoins) {
        // Completion reward
        updateCoins(COIN_REWARDS.GAME_COMPLETION);
        
        // High accuracy reward (90%+)
        if (accuracy >= 90) {
          updateCoins(COIN_REWARDS.HIGH_ACCURACY);
        }
      }
    }
  };

  const handleNotificationClose = () => {
    if (currentNotification && contextNotifications) {
      setTimeout(() => {
        setCurrentNotification(null);
        if (refreshRewardsContext) {
          refreshRewardsContext();
        }
      }, 300);
    }
  };

  const formatTime = (seconds: number) => {
    const minutes = Math.floor(seconds / 60);
    const remainingSeconds = seconds % 60;
    return `${minutes.toString().padStart(2, '0')}:${remainingSeconds.toString().padStart(2, '0')}`;
  };

  const startGame = () => {
    setIsGameStarted(true);
    setUsedNumbers([]); 
    generateQuestion();
    if (timerRef.current) {
      clearInterval(timerRef.current);
    }
    timerRef.current = setInterval(() => {
      setTime(prev => prev + 1);
    }, 1000);
    
    // Focus the input field after a short delay to ensure the element is rendered
    setTimeout(() => {
      if (inputRef.current) {
        inputRef.current.focus();
      }
    }, 100);
  };

  const resetGame = () => {
    setShowResults(false);
    setScore(0);
    setQuestionsAnswered(0);
    setGameHistory([]);
    setCurrentStreak(0);
    setTime(0);
    setUsedNumbers([]);
    generateQuestion();
    if (timerRef.current) {
      clearInterval(timerRef.current);
    }
    timerRef.current = setInterval(() => {
      setTime(prev => prev + 1);
    }, 1000);
    startGame();
  };

  return (
    <div className={`${gameStyles.container} ${gameColors.division.background}`}>
      <div className={gameStyles.innerContainer}>
        {/* Logo */}
        <div className={gameStyles.numberNinjasLogo.wrapper}>
          <Link to="/">
            <img src="/logo.png" alt="Number Ninjas" className={gameStyles.numberNinjasLogo.image} />
          </Link>
        </div>

        {/* User menu/navigation */}
        <div className={gameStyles.userMenu.wrapper}>
          <div className="flex space-x-4">
            <button
              onClick={() => navigate('/')}
              className={`${gameStyles.backButton} ${gameColors.division.gradient}`}
            >
              <ArrowLeft className={gameStyles.backIcon} />
              <span>Back</span>
            </button>

            <button
              onClick={() => setShowStats(true)}
              className={`${gameStyles.backButton} ${gameColors.division.gradient}`}
            >
              <BarChart2 className={gameStyles.backIcon} />
              <span>Stats</span>
            </button>
          </div>
        </div>

        {/* Coin animation */}
        {showCoinAnimation && (
          <CoinAnimation 
            amount={earnedCoins} 
            type={coinAnimationType}
            onComplete={() => {
              // Check if this was a correct answer and if we have a streak bonus to show
              const hasStreakBonus = coinAnimationType === 'correct' && currentStreak % 5 === 0 && currentStreak > 0;
              
              if (hasStreakBonus) {
                // Show streak bonus animation
                setEarnedCoins(COIN_REWARDS.STREAK_BONUS);
                setCoinAnimationType('streak');
                // The animation will continue showing
              } else {
                // No streak bonus, just hide the animation
                setShowCoinAnimation(false);
              }
            }}
          />
        )}
        
        {/* Reward notification */}
        {currentNotification && (
          <RewardNotification
            notification={currentNotification}
            onClose={handleNotificationClose} 
            autoClose={false} 
          />
        )}
        
        {/* Results Modal/Screen */} 
        {showResults && (
          <div className="fixed inset-0 bg-black bg-opacity-75 flex items-center justify-center z-50">
            <div className="bg-white p-8 rounded-lg shadow-xl text-center max-w-md w-full mx-4">
              <h2 className="text-2xl font-bold mb-4 text-gray-800">Game Over!</h2>
              <p className="text-xl mb-2 text-gray-700">Your Score: {score}/{TOTAL_QUESTIONS}</p>
              <p className="text-lg mb-2 text-gray-600">Accuracy: {((score / TOTAL_QUESTIONS) * 100).toFixed(0)}%</p>
              <p className="text-lg mb-4 text-gray-600">Time: {formatTime(time)}</p>
              <div className="flex justify-center space-x-4">
                <button 
                  onClick={() => resetGame()}
                  className={`px-6 py-2 rounded-lg font-semibold shadow-lg transition-colors duration-200 ${gameColors.division.button}`}
                >
                  Play Again
                </button>
                <button 
                  onClick={() => navigate('/')}
                  className="px-6 py-2 rounded-lg font-semibold shadow-lg transition-colors duration-200 bg-gray-500 hover:bg-gray-600 text-white"
                >
                  Home
                </button>
              </div>
            </div>
          </div>
        )}

        {/* Main game content */}
        <div className={gameStyles.contentWrapper}>
          <div className={gameStyles.gameCard}>
            <div className={`${gameStyles.gameCardGradient} ${gameColors.division.gradient}`}></div>
            <div className={gameStyles.gameCardInner}>
              {!isGameStarted ? (
                <div className={gameStyles.gameContent.startScreen.wrapper}>
                  <img 
                    src="/multiplication.png" 
                    alt="Multiplication Challenge Icon" 
                    className={gameStyles.gameContent.startScreen.image}
                  />
                  <h1 className={gameStyles.gameContent.startScreen.title}>Multiplication Challenge</h1>
                  
                  {/* Number Selection */}
                  <div className="mb-6">
                    <label className="block text-gray-700 text-sm font-bold mb-2 text-center">
                      Practice a Specific Times Table (Optional)
                    </label>
                    <div className="grid grid-cols-4 gap-2 max-w-xs mx-auto">
                      {[...Array(12)].map((_, i) => i + 1).map((num) => (
                        <button
                          key={num}
                          onClick={() => setSelectedNumber(selectedNumber === num ? undefined : num)}
                          className={`py-2 px-3 rounded-lg text-sm font-semibold transition-all duration-200 ease-in-out transform hover:scale-105 
                            ${selectedNumber === num
                              ? 'bg-orange-500 text-white shadow-md ring-2 ring-orange-300'
                              : 'bg-gray-100 text-gray-700 hover:bg-orange-100 hover:text-orange-600'}`}
                        >
                          {num}
                        </button>
                      ))}
                    </div>
                    {selectedNumber !== undefined && (
                      <p className="text-center text-sm text-orange-600 mt-2">
                        Practice Mode: Multiplying by {selectedNumber}
                      </p>
                    )}
                    {selectedNumber === undefined && (
                      <p className="text-center text-sm text-gray-500 mt-2">
                        Random Mode: All numbers will be used
                      </p>
                    )}
                  </div>
                  
                  {/* Difficulty Selection */}
                  <div className="mb-6">
                    <h2 className="text-lg font-semibold mb-2">Select Difficulty:</h2>
                    <div className="flex justify-center space-x-4">
                      {['easy', 'medium', 'hard'].map(d => (
                        <button
                          key={d}
                          className={`px-4 py-2 rounded-lg capitalize transition-colors duration-200 
                            ${difficulty === d 
                              ? `${gameColors.division.button} shadow-md ring-2 ring-orange-300` 
                              : 'bg-gray-100 text-gray-600 hover:bg-orange-100 hover:text-orange-600'}`}
                          onClick={() => setDifficulty(d as 'easy' | 'medium' | 'hard')}
                        >
                          {d}
                        </button>
                      ))}
                    </div>
                  </div>

                  <button
                    onClick={startGame}
                    className={`${gameStyles.gameContent.startScreen.startButton} ${gameColors.division.button}`}
                  >
                    <PlayIcon className="w-5 h-5" />
                    <span>Start Game</span>
                  </button>
                </div>
              ) : (
                <div className={gameStyles.gameContent.gameScreen.wrapper}>
                  <div className={gameStyles.gameContent.gameScreen.inner}>
                    {/* Top Bar: Score, Time, Question Count */}
                    <div className="flex justify-between mb-2 text-gray-600 font-medium text-xs sm:text-sm">
                      <div>Score: <span className="text-orange-600 font-bold">{score}</span></div>
                      <div>Time: <span className="text-orange-600 font-bold">{formatTime(time)}</span></div>
                      <div>Question: <span className="text-orange-600 font-bold">{questionsAnswered + 1}/{TOTAL_QUESTIONS}</span></div>
                    </div>

                    {/* Progress Bar */}
                    <div className={gameStyles.gameContent.progressBar.wrapper}>
                      <div 
                        className={gameStyles.gameContent.progressBar.inner}
                        style={{ 
                          width: `${(questionsAnswered / TOTAL_QUESTIONS) * 100}%`,
                          background: 'linear-gradient(to right, violet, indigo, blue, green, yellow, orange, red)',
                          backgroundSize: '200% 100%',
                          animation: 'shimmer 2s linear infinite'
                        }}
                      />
                    </div>
                    <style dangerouslySetInnerHTML={{ __html: `
                      @keyframes shimmer {
                        0% { background-position: 200% center; }
                        100% { background-position: -200% center; }
                      }
                    `}} />

                    <div className="text-3xl sm:text-4xl font-bold text-center mb-4 sm:mb-6 text-gray-700">
                      {num1} <span className="text-orange-500">×</span> {num2} = ?
                    </div>

                    <form onSubmit={handleSubmit} className="space-y-3 sm:space-y-4">
                      <input
                        type="number"
                        value={userAnswer}
                        onChange={(e) => setUserAnswer(e.target.value)}
                        className={`w-full px-4 py-3 rounded-lg border-2 border-gray-200 ${gameColors.division.focus} outline-none transition-all duration-200 text-center bg-white/80 backdrop-blur-sm shadow-inner`}
                        placeholder="Your answer"
                        ref={inputRef}
                        disabled={isProcessingAnswer}
                        autoComplete="off"
                        autoFocus
                      />
                      <button
                        type="submit"
                        className={`w-full py-3 rounded-lg font-semibold shadow-lg transition-colors duration-200 ${isProcessingAnswer ? 'bg-gray-400 cursor-not-allowed' : gameColors.division.button}`}
                        disabled={isProcessingAnswer}
                      >
                        {isProcessingAnswer ? 'Checking...' : 'Submit Answer'}
                      </button>
                    </form>

                    {/* Game History */}
                    <div className="flex gap-1 mt-6 justify-center">
                      {gameHistory.map((result, index) => (
                        <div
                          key={index}
                          className={`w-3 h-3 rounded-full ${result.includes('Correct') ? 'bg-green-500' : 'bg-red-500'}`}
                          title={result} // Show full result on hover
                        />
                      ))}
                    </div>
                  </div>
                </div>
              )}
            </div>
          </div>
        </div>
        
        {/* Mr. Primo logo at bottom */}
        <div className={gameStyles.mrPrimoLogo.wrapper}>
          <Link to={gameStyles.mrPrimoLogo.link} target="_blank" rel="noopener noreferrer" className="inline-block">
            <img src="/MrPrimo-LOGO-sm.png" alt="Mr. Primo" className={gameStyles.mrPrimoLogo.image} />
          </Link>
        </div>

        {/* Stats Modal */}
        {showStats && (
          <StatsModal
            isOpen={showStats}
            onClose={() => setShowStats(false)}
            stats={userStats}
            loading={statsLoading}
            error={statsError}
            gameType="multiplication"
          />
        )}
      </div>
    </div>
  );
};

export default Game;
